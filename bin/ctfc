#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/ctfc'
require 'optimist'
require 'kolorit'

opts = Optimist.options do
  version "Crypto To Fiat Currency\nGem Version: #{CTFC::VERSION}"

  banner ''
  banner ' Enter fiat currencies with/out additional arguments:'
  banner ''
  banner '  ruby bin/ctfc eur'
  banner '  ruby bin/ctfc eur usd --no-save --coins btc xmr ltc'
  banner ''

  opt :coins,     'Set crypto coins', default: %w[BTC XMR ETH LTC]
  opt :save,      "Save prices in '.csv' table"
  opt :export,    "Export all data in '.json' file"
  opt :no_print,  'Do not print terminal output'
  opt :loop,      'Run script N times',           default: 1, type: :integer
  opt :wait,      'Wait N seconds between loop',  default: 0, type: :integer
end

coins = opts[:coins]
save  = opts[:save]
export = opts[:export]
print = opts[:no_print] ? false : true

if ARGV.empty?

  # default behavior without arguments - change to suit your needs
  crypto = CTFC::Client.new(:eur, coins, :cryptocompare, save: false)
  crypto.get
  crypto.prices.each { |x, y| puts "#{x}: #{y} eur".cyan.bold } if print
else
  opts[:loop].times do
    ARGV.each do |fiat|
      next if opts.include?(fiat.downcase)

      crypto = CTFC::Client.new(fiat, coins, :cryptocompare,
                                save: save, export: export, print: print)

      crypto.get
      crypto.prices.each { |x, y| puts "#{x}: #{y} #{fiat}".cyan.bold } if print
      sleep 0.5
    end

    # end if no `--loop` arg
    next unless opts[:loop] > 1

    # pause between loops
    sleep opts[:wait]

    # clear screen - depending on OS
    system 'clear' or system 'cls'
  end
end
