#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optimist'
require_relative '../lib/ctfc'
require_relative '../lib/ctfc/helpers/cli'

COINS = %w[BTC XMR ETH LTC].freeze

opts = Optimist.options do
  version "Crypto To Fiat Currency\nGem Version: #{CTFC::VERSION}"

  banner ''
  banner ' Enter fiat currencies with/out additional arguments:'
  banner ''
  banner '  ruby bin/ctfc eur'
  banner '  ruby bin/ctfc eur usd --no-save --coins btc xmr ltc'
  banner ''

  opt :coins,     'Set crypto coins',                 default: COINS
  opt :save,      "Save prices in '.csv' table",      default: false
  opt :export,    "Export all data in '.json' file",  default: false
  opt :no_print,  'Do not print terminal output',     default: false
  opt :source,    'Set source to extract data',       default: 'cryptocompare'
  opt :loop,      'Run script N times',               default: 1, type: :integer
  opt :wait,      'Wait N seconds between loop',      default: 0, type: :integer
end

coins  = opts[:coins]
source = opts[:source]
save   = opts[:save]
export = opts[:export]
print  = true unless opts[:no_print]

if ARGV.empty?
  prices = Crypto.to :usd, coins, source.to_sym, save: save, export: export
  Cli.print_output :USD, prices if print
else
  opts[:loop].times do
    ARGV.each do |fiat|
      next if opts.include?(fiat.downcase)

      prices = Crypto.to fiat, coins, source.to_sym, save: save, export: export
      next unless print

      system 'clear' or system 'cls'
      Cli.print_output fiat, prices
    end

    next unless opts[:loop] > 1

    sleep opts[:wait]
  end
end
